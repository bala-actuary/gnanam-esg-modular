name: ESG Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'repositories/**'
      - 'shared-libraries/**'
      - 'integration-tests/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'repositories/**'
      - 'shared-libraries/**'
      - 'integration-tests/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      modules:
        description: 'Specific modules to deploy (comma-separated, leave empty for all)'
        required: false
        type: string

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: gnanam-esg

jobs:
  # ============================================================================
  # DEPENDENCY INSTALLATION & CACHE SETUP
  # ============================================================================
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=esg-${{ github.sha }}-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node.js dependencies
        run: |
          npm ci
          npm run setup

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r integration-tests/requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            **/node_modules
            ~/.cache/pip
          key: ${{ steps.cache-key.outputs.value }}

  # ============================================================================
  # CODE QUALITY CHECKS
  # ============================================================================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        module: [
          'api-gateway',
          'aggregation-engine', 
          'monitoring-dashboard',
          'ai-gateway',
          'web-frontend',
          'risk-interest-rate',
          'risk-credit',
          'risk-equity',
          'risk-foreign-exchange',
          'risk-inflation',
          'risk-liquidity',
          'risk-counterparty'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install black flake8 mypy

      - name: Lint Python code
        if: contains(matrix.module, 'api-gateway') || contains(matrix.module, 'aggregation-engine') || contains(matrix.module, 'monitoring-dashboard') || contains(matrix.module, 'ai-gateway') || contains(matrix.module, 'risk-')
        run: |
          cd repositories/${{ matrix.module }}
          if [ -f "src" ]; then
            black --check src/ tests/
            flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
            mypy src/ --ignore-missing-imports
          fi

      - name: Lint TypeScript/JavaScript code
        if: contains(matrix.module, 'web-frontend')
        run: |
          cd repositories/${{ matrix.module }}
          npm run lint
          npm run type-check

      - name: Format check
        run: |
          cd repositories/${{ matrix.module }}
          if [ -f "package.json" ]; then
            npm run format:check 2>/dev/null || echo "Format check not configured"
          fi

  # ============================================================================
  # UNIT TESTS
  # ============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        module: [
          'api-gateway',
          'aggregation-engine', 
          'monitoring-dashboard',
          'ai-gateway',
          'web-frontend',
          'risk-interest-rate',
          'risk-credit',
          'risk-equity',
          'risk-foreign-exchange',
          'risk-inflation',
          'risk-liquidity',
          'risk-counterparty'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install pytest pytest-cov pytest-asyncio

      - name: Run Python unit tests
        if: contains(matrix.module, 'api-gateway') || contains(matrix.module, 'aggregation-engine') || contains(matrix.module, 'monitoring-dashboard') || contains(matrix.module, 'ai-gateway') || contains(matrix.module, 'risk-')
        run: |
          cd repositories/${{ matrix.module }}
          if [ -d "tests" ]; then
            python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing
          else
            echo "No tests directory found for ${{ matrix.module }}"
          fi

      - name: Run TypeScript/JavaScript unit tests
        if: contains(matrix.module, 'web-frontend')
        run: |
          cd repositories/${{ matrix.module }}
          npm run test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: repositories/${{ matrix.module }}/coverage.xml
          flags: ${{ matrix.module }}
          name: ${{ matrix.module }}-coverage

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: esg_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r integration-tests/requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run integration tests
        run: |
          cd integration-tests
          python run_tests.py --suite all --parallel --timeout 600

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-tests/test_results.json
          retention-days: 30

      - name: Generate test report
        run: |
          cd integration-tests
          python -c "
          import json
          with open('test_results.json', 'r') as f:
              results = json.load(f)
          print(f'Integration Tests Summary:')
          print(f'Total Tests: {results.get(\"total_tests\", 0)}')
          print(f'Passed: {results.get(\"passed\", 0)}')
          print(f'Failed: {results.get(\"failed\", 0)}')
          print(f'Success Rate: {results.get(\"success_rate\", 0):.1f}%')
          "

  # ============================================================================
  # BUILD & PACKAGE
  # ============================================================================
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [setup, code-quality, unit-tests, integration-tests]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        module: [
          'api-gateway',
          'aggregation-engine', 
          'monitoring-dashboard',
          'ai-gateway',
          'web-frontend',
          'risk-interest-rate',
          'risk-credit',
          'risk-equity',
          'risk-foreign-exchange',
          'risk-inflation',
          'risk-liquidity',
          'risk-counterparty'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci

      - name: Build TypeScript/JavaScript modules
        if: contains(matrix.module, 'web-frontend')
        run: |
          cd repositories/${{ matrix.module }}
          npm run build

      - name: Build Python modules
        if: contains(matrix.module, 'api-gateway') || contains(matrix.module, 'aggregation-engine') || contains(matrix.module, 'monitoring-dashboard') || contains(matrix.module, 'ai-gateway') || contains(matrix.module, 'risk-')
        run: |
          cd repositories/${{ matrix.module }}
          if [ -f "setup.py" ]; then
            python setup.py build
          fi

      - name: Build Docker images
        run: |
          cd repositories/${{ matrix.module }}
          if [ -f "Dockerfile" ]; then
            docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.module }}:${{ github.sha }} .
            docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.module }}:latest .
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.module }}-build
          path: repositories/${{ matrix.module }}/dist/
          retention-days: 7

  # ============================================================================
  # SECURITY SCAN
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r repositories/ -f json -o bandit-results.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            bandit-results.json
          retention-days: 30

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "Deploying to staging environment"
          echo "Modules to deploy: ${{ github.event.inputs.modules || 'all' }}"

      - name: Deploy to staging
        run: |
          # This would contain your actual deployment logic
          # For now, we'll simulate deployment
          echo "Deploying modules to staging..."
          echo "Environment: STAGING"
          echo "Timestamp: $(date)"
          
          # Example deployment commands:
          # docker-compose -f docker-compose.staging.yml up -d
          # kubectl apply -f k8s/staging/
          # helm upgrade --install esg-platform ./helm-charts --namespace staging

      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment health checks..."
          # Add your health check logic here
          sleep 30
          echo "Health checks completed"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging deployment failed"
          fi

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "Deploying to production environment"
          echo "Modules to deploy: ${{ github.event.inputs.modules || 'all' }}"

      - name: Deploy to production
        run: |
          # This would contain your actual production deployment logic
          echo "Deploying modules to production..."
          echo "Environment: PRODUCTION"
          echo "Timestamp: $(date)"
          
          # Example deployment commands:
          # docker-compose -f docker-compose.prod.yml up -d
          # kubectl apply -f k8s/production/
          # helm upgrade --install esg-platform ./helm-charts --namespace production

      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment health checks..."
          # Add your health check logic here
          sleep 30
          echo "Health checks completed"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
          fi

  # ============================================================================
  # PERFORMANCE TESTS
  # ============================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r integration-tests/requirements.txt
          pip install locust

      - name: Run performance tests
        run: |
          cd integration-tests
          python run_tests.py --suite performance --timeout 900

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: integration-tests/performance_results.json
          retention-days: 30

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, performance-tests]
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "🎉 All CI/CD pipeline stages completed successfully!"
          echo "Environment: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Environment: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Please check the logs for details." 