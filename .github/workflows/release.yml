name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          git log --oneline --no-merges $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD >> CHANGELOG.md
          
          # Add release notes if provided
          if [ "${{ github.event.inputs.release_notes }}" != "" ]; then
            echo "" >> CHANGELOG.md
            echo "## Release Notes" >> CHANGELOG.md
            echo "${{ github.event.inputs.release_notes }}" >> CHANGELOG.md
          fi

      - name: Update version files
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # Update package.json
          npm version $VERSION --no-git-tag-version
          
          # Update Python version files
          find repositories/ -name "setup.py" -exec sed -i "s/version=.*/version='$VERSION',/" {} \;
          find repositories/ -name "pyproject.toml" -exec sed -i "s/version = .*/version = \"$VERSION\"/" {} \;

      - name: Build all modules
        run: |
          npm run build

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: ESG Platform ${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./CHANGELOG.md
          asset_name: CHANGELOG.md
          asset_content_type: text/markdown

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: create-release
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "Deploying release ${{ needs.create-release.outputs.version }} to production"

      - name: Deploy to production
        run: |
          # Production deployment logic
          echo "Deploying ESG Platform ${{ needs.create-release.outputs.version }}"
          
          # Example deployment commands:
          # docker-compose -f docker-compose.prod.yml up -d
          # kubectl apply -f k8s/production/
          # helm upgrade --install esg-platform ./helm-charts --namespace production --set version=${{ needs.create-release.outputs.version }}

      - name: Run post-deployment verification
        run: |
          echo "Verifying deployment..."
          sleep 60
          echo "Deployment verification completed"

      - name: Notify stakeholders
        run: |
          echo "ðŸŽ‰ Release ${{ needs.create-release.outputs.version }} successfully deployed to production!"
          echo "Release URL: ${{ needs.create-release.outputs.url }}" 